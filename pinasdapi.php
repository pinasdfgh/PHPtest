<?php
class cart{
    private $list;
    private $member;
    function __construct($member){
        //建構式init 在賦初值
        $this->list=array();
        $this->member=$member;
    }

    function addItem($pid,$qty){
        $this->list[$pid]=$qty;

    }
    function removeItem($pid){
        unset($this->list[$pid]);
    }
    function getlist(){
        return $this->list;
    }
    function getmember(){
        return $this->member;
    }
}
class Member {
    var $twid;  // Member Object has-a TWID Object
    function __construct($twid){
        $this->twid = new TWID($twid);
    }
}
class TWID
{
    private $id;
    //static 宣告屬性為整個類別共用的屬性
    static $counter;

    function __construct($id)
    {
        twid::$counter++;
        $this->id = $id;
    }
    function getTWID(){return $this->id;}

    function getGender()
    {
        $n2 = substr($this->id, 1, 1);
        if ($n2 = 1) {
            return true;
        } else return false;
    }

    function getarea()
    {
        echo 'T';
    }

    //static=>與物件無關的可以宣告
    public static function checkId($twid)
    {
        $ret = 0;   // 格式錯誤
        if (preg_match('/^[A-Z][12][0-9]{8}$/', $twid) > 0) {
            $n12s = substr($twid, 0, 1);
            //echo $n12s;
            $letters = 'ABCDEFGHJKLMNPQRSTUVXYWZIO';
            $n12 = strpos($letters, $n12s) + 10;
            $n1 = (int)($n12 / 10);
            $n2 = $n12 % 10;
            $n3 = substr($twid, 1, 1);
            $n4 = substr($twid, 2, 1);
            $n5 = substr($twid, 3, 1);
            $n6 = substr($twid, 4, 1);
            $n7 = substr($twid, 5, 1);
            $n8 = substr($twid, 6, 1);
            $n9 = substr($twid, 7, 1);
            $n10 = substr($twid, 8, 1);
            $n11 = substr($twid, 9, 1);
            $sum = $n1 * 1 + $n2 * 9 + $n3 * 8 + $n4 * 7 + $n5 * 6 +
                $n6 * 5 + $n7 * 4 + $n8 * 3 + $n9 * 2 + $n10 * 1 + $n11 * 1;
            if ($sum % 10 == 0) {
                $ret = 1;   // OK
            } else {
                $ret = -1;   // 檢查碼沒過
            }
        }
        return $ret;
    }
}

class Bike{
    //封裝=> 不限public=var 限類別private 限同族protected

    protected $speed=0;
    //建構式=>建立物件時執行一次,主要為init
    function __construct(){
        echo 'construct';
    }

    function upspeed(){
        $this->speed=($this->speed<1)?1:$this->speed*1.2;
    }
    function dnspeed(){
        $this->speed=($this->speed<1)?0:$this->speed*0.8;
    }
    function getSpeed(){
        return $this->speed;
    }
}

class Scooter extends Bike{
    function __construct(){
        parent::__construct();
        echo 'V2';
    }

    function upspeed(){
        //繼承用父類別加強演算法
        parent::upspeed(); // TODO: Change the autogenerated stub
        $this->speed*=2;
    }

}

function isRightTWId(string $twid){
    $ret = 0;   // 格式錯誤
    if (preg_match('/^[A-Z][12][0-9]{8}$/', $twid)>0){
        $n12s = substr($twid, 0, 1);
        //echo $n12s;
        $letters = 'ABCDEFGHJKLMNPQRSTUVXYWZIO';
        $n12 = strpos($letters, $n12s) + 10;
        $n1 = (int)($n12 / 10);
        $n2 = $n12 % 10;
        $n3 = substr($twid, 1, 1);
        $n4 = substr($twid, 2, 1);
        $n5 = substr($twid, 3, 1);
        $n6 = substr($twid, 4, 1);
        $n7 = substr($twid, 5, 1);
        $n8 = substr($twid, 6, 1);
        $n9 = substr($twid, 7, 1);
        $n10 = substr($twid, 8, 1);
        $n11 = substr($twid, 9, 1);
        $sum = $n1*1 + $n2*9 + $n3*8 + $n4*7 + $n5*6 +
            $n6*5 + $n7*4 + $n8*3 + $n9*2 + $n10*1 + $n11*1;
        if ($sum %10 == 0){
            $ret = 1;   // OK
        }else{
            $ret =-1;   // 檢查碼沒過
        }
    }
    return $ret;
}

function createLeooty(){
    $leooty=range(1,49);
    shuffle($leooty);
    $ret;
    for($i=0;$i<6;$i++){
        $ret[]=$leooty[$i];
    }
    sort($ret);
    return $ret;
}



